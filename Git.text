#Class 1
- Select the adress of your code (Exam: /e/06. Programming/01. Visual Studio Code/Git/mi-portafolio)
- Create a repository with: git init
- Use "cd" for to enter to directory

#Class 2
- git config --global user.name "Jose Molleda" (Configure main user)
- git config --global user.email "jose.molleda.1999@gmail.com" (Configure main email)
- git config user.name (view main user)
- git config user.email (view main email)
- git config --global core.editor "vim" (Select the editor)
- git config --global core.editor (view the editor. Exam: VSC,vim)

#Class 3
- With "git status" you can see branch and commits
- With "git add" you select the file (Exam: git add index.html)
- With "git commit -m" you enter the text (Exam: git commit -m "Se crea el archivo index.html que será 
la página inicial del sitio web.")

#Class 4
- Working directory (Directorio de trabajo): All the project, where you modify files
- Stage area (Área de preparación): Where you add specific changes to be included in the next commit.
- Repository: Where committed changes are permanently stored (Commit History).

# How the Staging Area Works
- When you modify a file, it stays in the Working Directory.
- Running "git add" <file> moves the changes to the Staging Area.
- Running "git commit -m "message"" moves the staged changes to the Repository.

#Class 5
- With "git add -A" pass the files from Working directory to Stage area
- With "git log" show all history of changes

#Class 6
- With "git restore --staged "styles.css"" you can pass from Stage area to Working directory
- With "git checkout "styles.css"" you can restant to the previous commit

#Class 7
- With "git show ......" you can see the details changes
- With "git log --oneline" you can see the details in one line
- With "git log --oneline "styles.css"" if you put the file, you only see his commit
- With "git log --oneline --author="Jose Molleda"" you see the commit from the author
- With "git log --oneline --grep="se"" for to look for a text

#Class 8
- With "git checkout master" you get the current repository
- With "git log --oneline --graph" you see a graph of commit
- With "git branch" you can see the rame that you user

#Class 8
- With "git checkout -b "dev"" you can create a new branch
- With "git switch -c "dev"" you can create and change to new rame "dev"
- With "git merge dev" you can merge to rames
- With "git diff dev" you can compare two rame


